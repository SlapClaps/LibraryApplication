#include "QtLibGUI.h"
#include "qpushbutton.h"
#include "qlineedit.h"
#include "qtextedit.h"


// Constructor
QtLibGUI::QtLibGUI(QWidget* parent) : QMainWindow(parent)
{
    ui.setupUi(this);               // This method is auto-generated by the UIC (User Interface Compiler) and sets up all the widgets and layouts as defined in the .ui file.

    connect(ui.addBookButton, &QPushButton::clicked, this, &QtLibGUI::onAddBookButtonClicked);
    connect(ui.connectButton, &QPushButton::clicked, this, &QtLibGUI::onConnect);
    connect(ui.disconnectButton, &QPushButton::clicked, this, &QtLibGUI::onDisconnect);
    connect(ui.logInButton, &QPushButton::clicked, this, &QtLibGUI::onLogin);
    connect(ui.sendMessageButton, &QPushButton::clicked, this, &QtLibGUI::onSendMessage);
    connect(ui.listBooksButton, &QPushButton::clicked, this, &QtLibGUI::onListBooks);
    connect(ui.listMembersButton, &QPushButton::clicked, this, &QtLibGUI::onListMembers);
    connect(ui.addMemberButton, &QPushButton::clicked, this, &QtLibGUI::onAddMember);

    connect(&getMsgTimer, &QTimer::timeout, this, &QtLibGUI::onGetMessage);

    getMsgTimer.setInterval(1000); // in milliseconds.
    getMsgTimer.start();

    myClient.Connect("127.0.0.1", 60000);

    onStartupConnect();
}

// Currently, the destructor empty, but you can add cleanup code here if needed in the future.
QtLibGUI::~QtLibGUI()
{}

void QtLibGUI::onListBooks() {
    myClient.listBooks();
}

void QtLibGUI::onListMembers() {
    myClient.listMembers();
}

void QtLibGUI::onSendMessage() {
    QString tempMsgToSend = ui.lineEdit->text();
    std::string msgToSend = tempMsgToSend.toStdString();
    myClient.MessageServer(msgToSend);
    ui.textEdit->append("Message sent");
}

void QtLibGUI::onGetMessage() {
    std::string tempResponse = myClient.getMessage(myClient);
    if (!tempResponse.empty()) {
        QString response = QString::fromStdString(tempResponse);
        ui.textEdit->append(response);
    }
}

void QtLibGUI::onAddBookButtonClicked() {
    QString tempBookTitle = ui.bookTitleInput->text();
    QString tempAuthor = ui.authorInput->text();
    QString tempGenre = ui.genreInput->text();
    QString tempPublicationYear = ui.publicationYearInput->text();
    QString tempIsbn = ui.isbnAddBookInput->text();
    
    QString tempMsgToSend = tempBookTitle + ";" + tempAuthor + ";" + tempGenre + ";" +
        tempIsbn + ";" + tempPublicationYear + ";";

    std::string msgToSendString = tempMsgToSend.toStdString();
    myClient.addBookCommand(msgToSendString);
}

void QtLibGUI::onAddMember() {
    std::string name = ui.nameInput->text().toStdString();
    std::string ID = ui.newIDInput->text().toStdString();
    std::string username = ui.newUsernameInput->text().toStdString();
    std::string password = ui.newPasswordInput->text().toStdString();
    std::string msgToSend = name + ";" + ID + ";" + username + ";" + password + ";";
    myClient.addMemberCommand(msgToSend);
}

void QtLibGUI::onStartupConnect() {
    if (myClient.IsConnected()) {
        ui.textEdit->append("Connection successful");
    }
    else {
        ui.textEdit->append("Connection failed");
    }
}

void QtLibGUI::onConnect() {
    myClient.Connect("127.0.0.1", 60000);
    if (myClient.IsConnected()) {
        ui.textEdit->append("Connection successful");
    }
    else {
        ui.textEdit->append("Connection failed");
    }
}

void QtLibGUI::onDisconnect() {
    myClient.isLoggedIn = false;
    myClient.Disconnect();
    if (myClient.IsConnected()) {
        ui.textEdit->append("Disconnection failed, still connected");
    }
    else {
        ui.textEdit->append("Disconnection successful");
    }
}

void QtLibGUI::checkConnectionStatus() {
    if (myClient.IsConnected()) {
        ui.textEdit->append("Connected");
    }
    else {
        ui.textEdit->append("Not connected");
    }
}

void QtLibGUI::onLogin() {
    QString usernameInput = ui.usernameInput->text();
    QString passwordInput = ui.passwordInput->text();
    std::string username = usernameInput.toStdString();
    std::string password = passwordInput.toStdString();
    myClient.handleLogin(username, password);
    std::string tempResponse = myClient.waitForResponse(myClient);
    QString response = QString::fromStdString(tempResponse);
    ui.textEdit->append(response);
}